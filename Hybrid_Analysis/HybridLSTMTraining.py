#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Dec 7 18:05:27 2020

@author: hallavar
"""

import sys
sys.path.append('../')
import os
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'  # or any {'0', '1', '2'}
#os.environ['CUDA_VISIBLE_DEVICES'] = '-1'
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.ensemble import RandomForestClassifier
from tensorflow.keras.models import Sequential
from tensorflow.keras.backend import clear_session
from tensorflow.keras.callbacks import EarlyStopping
from tensorflow.config.optimizer import set_jit
from tensorflow.config.experimental import list_physical_devices, set_memory_growth
from tensorflow.keras.layers import Dense, Dropout, Masking, Conv1D, LSTM, TimeDistributed
from common import load_firstlayer_data, create_secondlayer_partition, DataGenerator, data_generation, get_test_data, Binary_Classification, get_metrics

# clear_session()
# set_jit(True)

# gpus = list_physical_devices('GPU')
# for gpu in gpus:
#   set_memory_growth(gpu, True)


#Istlayer_dataset_path = "../../Datasets/API-Intent-Traffic/Other_CSVs/1st_Layer/" #Sur le PC portable
Istlayer_dataset_path = "E:/pfe/CICInvesandMal2019/Analysis-CSV/Other_CSVs/1st_Layer/" #Sur le PC fixe
Snd_layer_data_path = 'E:/pfe/CICAndMal2017/'

train_samples, train_labels=load_firstlayer_data(Istlayer_dataset_path, data='Testing')
# rf= RandomForestClassifier(criterion='entropy', max_features=2, max_leaf_nodes=552,n_estimators=163)
# rf.fit(train_samples, train_labels)

# CrÃ©ation du rÃ©seau de neurones 

model_static = Sequential()

#1Ã¨re couche 
model_static.add(Dense(units=8111, activation='relu'))
model_static.add(Dense(units=256, activation='relu'))
model_static.add(Dense(units=128, activation='relu'))
model_static.add(Dense(units=64, activation='relu'))
model_static.add(Dense(units=1, activation='sigmoid'))

model_static.compile(optimizer='adam',loss='binary_crossentropy',metrics='accuracy')
model_static.fit(train_samples, train_labels, epochs=10)

static_df=pd.read_csv(Istlayer_dataset_path+'StaticLayer_Intent_and_Permission_Bening&malware_'+'Training'+'Smaples.csv')
static_df=static_df.drop_duplicates(['<MD5>'])
temp=static_df.drop(['Binary_Type','<family>','<category>', '<MD5>'], axis=1)
static_df['Static prediction']=model_static.predict(temp)

# partition, test = create_secondlayer_partition(Istlayer_dataset_path,'../../Datasets/',3/4,1/4) #Sur le PC portable
partition, test = create_secondlayer_partition(Istlayer_dataset_path,Snd_layer_data_path,5/6,1/6) #Sur le PC fixe

dic=pd.read_csv('Dynamic_features_statistics.csv', index_col=0)
dic=dic.to_dict()

training_generator = DataGenerator(partition['train'], static_df, max_values=dic, batch_size=32, padding=None)
validation_generator = DataGenerator(partition['validation'], static_df, max_values=dic, batch_size=64, padding=None)

special_value= -1.0

model = Sequential()
#model.add(Masking(mask_value=special_value, batch_input_shape = (None, None, 71)))
model.add(LSTM(64, return_sequences=True))
model.add(Dropout(rate=0.2))
model.add(LSTM(32))
model.add(Dropout(rate=0.2))
model.add(Dense(5, activation='softmax'))
model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])
#es_callback = EarlyStopping(monitor='val_loss', patience=25)
history = model.fit(x = training_generator, validation_data = validation_generator, epochs=300, verbose=1)
loss = history.history['loss']
val_loss = history.history['val_loss']

epochs = range(1, len(loss) + 1)

plt.plot(epochs, loss, 'bo', label='Training loss')
plt.plot(epochs, val_loss, 'r', label='Validation loss')
plt.title('Training and validation loss')
plt.legend()

plt.show()

    
test_samples, test_labels = get_test_data(test, static_df, dic, Snd_layer_data_path)

static_prediction=[u[0][70] for u in test_samples]

static_prediction=np.round(np.asarray(static_prediction))

hybrid_prediction=model.predict(test_samples)

hybrid_prediction = Binary_Classification(hybrid_prediction)

test_labels = Binary_Classification(test_labels)

#_, _, _, f1_static=get_metrics(test_labels,static_prediction, get_cm=False)
print(get_metrics(test_labels,static_prediction, get_cm=True))
print(get_metrics(test_labels,hybrid_prediction, get_cm=True))
#_, _, _, f1_hybrid=get_metrics(test_labels,hybrid_prediction, get_cm=False)

#print('Le f1-score du modèle statique est : ', f1_static)
#print('Le f1-score du modèle hybride est : ', f1_hybrid)