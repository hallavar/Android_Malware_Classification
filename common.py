#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sun Nov 22 14:15:25 2020

@author: hallavar
"""

import glob
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix

def load_firstlayer_data(path, data):
    df = pd.read_csv(path+'StaticLayer_Intent_and_Permission_Bening&malware_'+data+'Smaples.csv')

    d ={'Malware': True, 'Benign': False}
    df['Binary_Type']=df['Binary_Type'].map(d)
      
    labels=df['Binary_Type']
    df.drop(['Binary_Type','<family>','<category>', '<MD5>'], inplace=True, axis=1)
    samples=df
    return samples, labels

def load_secondlayer_data(path, data, model):
    pass

def create_secondlayer_data(Fstlayer_data_path, Sndlayer_data_path, Training_ratio): 
    df_global=pd.read_csv(Fstlayer_data_path+'/StaticLayer_Intent_and_Permission_Bening&malware_TrainingSmaples.csv')
    hashs=np.asarray(df_global['<MD5>'])
    hashs=change_hash_into_path(hashs, Sndlayer_data_path)
    hashs=train_test_split(hashs, train_size=Training_ratio, shuffle=True)
    for data in hashs:
        for j, path in enumerate(data):
            data[j]=pd.read_csv(path)
    return np.asarray(hashs[0]), np.asarray(hashs[1])

def change_hash_into_path(hashs, path):
    list_csv=glob.glob(path+'/***-CSVs/**/*.csv', recursive=True)
    for i,hsh in enumerate(hashs):
        for path in list_csv:
            if hsh in path:
                hashs[i]=path
    return hashs
def get_metrics(true_labels,predictions, get_cm=True):
    cm=confusion_matrix(true_labels,predictions)

    tn, fp, fn, tp = cm.ravel()
    N=len(predictions)

    accuracy=(tn+tp)/N
    precision=tp/(tp+fp)
    recall=tp/(tp+fn)
    f1=2*(precision*recall)/(precision+recall)
    
    if get_cm:
        return cm, accuracy, precision, recall, f1
    else:
        return accuracy, precision, recall, f1