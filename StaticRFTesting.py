#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sat Nov 21 19:53:27 2020

@author: hallavar
"""

import joblib
import numpy as np
import matplotlib.pyplot as plt
from common import load_firstlayer_data, get_metrics
from Graphics import make_confusion_matrix


Istlayer_dataset_path = "../Datasets/API-Intent-Traffic/Other_CSVs/1st_Layer/"

test_samples, test_labels=load_firstlayer_data(Istlayer_dataset_path, data='Testing')

rf = joblib.load("./RFOptiStochastic3.joblib")

predictions= rf.predict(test_samples)

cm, accuracy, precision, recall, f1 = get_metrics(test_labels, predictions)

categories=['Benign', 'Malware']
labels = ['True Neg','False Pos','False Neg','True Pos']

make_confusion_matrix(cm, 
                      group_names=labels,
                      categories=categories, 
                      cmap='binary',
                      sklearn_matrix=True)

def draw_importance(rf, test_samples):
        importances = rf.feature_importances_
        std = np.std([tree.feature_importances_ for tree in rf.estimators_],
             axis=0)
        indices = np.argsort(importances)[::-1]
        # for i,f in enumerate(test_samples.columns):
        #     print("%s. feature %d (%f)" % (f, indices[i], importances[indices[i]]))
        plt.figure()
        plt.title("Feature importances")
        plt.bar(test_samples.columns, importances[indices], color="r", yerr=std[indices], align="center")
        plt.xticks(test_samples.columns, indices)
        plt.xlim([-1, 5])
        plt.show()